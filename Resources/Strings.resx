<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Info_SetupKey" xml:space="preserve">
    <value>You have to set your API key with:
'pb key o.Abc12345xyz'</value>
  </data>
  <data name="Info_CommandNotFound" xml:space="preserve">
    <value>Command '{0}' not found!
    
Use following to show commands:
'pb help' or 'pb -h'</value>
  </data>
  <data name="CliArguments_Key" xml:space="preserve">
    <value>Set API key with argument. Show API key without argument.</value>
  </data>
  <data name="CliArguments_Profile" xml:space="preserve">
    <value>Get profile of configured API key.</value>
  </data>
  <data name="CliArguments_Limits" xml:space="preserve">
    <value>Get rate limits.</value>
  </data>
  <data name="CliArguments_Grants" xml:space="preserve">
    <value>Show grants that have access to your Pushbullet account.</value>
  </data>
  <data name="CliArguments_PushInfo" xml:space="preserve">
    <value>Show information of the given push id.</value>
  </data>
  <data name="CliArguments_Push" xml:space="preserve">
    <value>Push text or note. Use push [device / -d] to push to a specific device.</value>
  </data>
  <data name="CliArguments_Link" xml:space="preserve">
    <value>Push link. Use link [device / -d] to push link to a specific device.</value>
  </data>
  <data name="CliArguments_Pushes" xml:space="preserve">
    <value>List [number] of pushes or else last push.</value>
  </data>
  <data name="CliArguments_Clip" xml:space="preserve">
    <value>Pushes a clip.</value>
  </data>
  <data name="CliArguments_Sms" xml:space="preserve">
    <value>Send sms to eligible device.</value>
  </data>
  <data name="CliArguments_Device" xml:space="preserve">
    <value>Shows information about a device. Select with identifier or index shown in the [devices / -ds] command.</value>
  </data>
  <data name="CliArguments_Devices" xml:space="preserve">
    <value>Lists devices of current account. Including identifiers and indexes to identify.</value>
  </data>
  <data name="CliArguments_Chat" xml:space="preserve">
    <value>Create or update chat.</value>
  </data>
  <data name="CliArguments_Chats" xml:space="preserve">
    <value>List chats of current account.</value>
  </data>
  <data name="CliArguments_Delete" xml:space="preserve">
    <value>Delete an object.</value>
  </data>
  <data name="CliArguments_Subscriptions" xml:space="preserve">
    <value>List subscriptions with channel tag of current account.</value>
  </data>
  <data name="CliArguments_ChannelInfo" xml:space="preserve">
    <value>Show information about a specific channel with channel tag as shown in [subscriptions / subs / -s].</value>
  </data>
  <data name="CliArguments_Help" xml:space="preserve">
    <value>Show this help.</value>
  </data>
  <data name="CliArguments_Version" xml:space="preserve">
    <value>Shows the actual pushbullet-cli version.</value>
  </data>
  <data name="PushArgs_Device" xml:space="preserve">
    <value>To which device should be pushed.</value>
  </data>
  <data name="PushArgs_Text" xml:space="preserve">
    <value>Push text which should be pushed.</value>
  </data>
  <data name="PushArgs_Note" xml:space="preserve">
    <value>Note to push with title and message.</value>
  </data>
  <data name="LinkArgs_Device" xml:space="preserve">
    <value>To which device should be pushed the link/url.</value>
  </data>
  <data name="LinkArgs_Url" xml:space="preserve">
    <value>Link for this push.</value>
  </data>
  <data name="LinkArgs_Title" xml:space="preserve">
    <value>Title for this push.</value>
  </data>
  <data name="LinkArgs_Body" xml:space="preserve">
    <value>Body text for this push.</value>
  </data>
  <data name="ChatArgs_Update" xml:space="preserve">
    <value>Update chat with a mute flag.</value>
  </data>
  <data name="ChatArgs_Create" xml:space="preserve">
    <value>Create new chat with given email address.</value>
  </data>
  <data name="DeleteArgs_Push" xml:space="preserve">
    <value>Delete the specified push.</value>
  </data>
  <data name="DeleteArgs_Chat" xml:space="preserve">
    <value>Delete the specified chat.</value>
  </data>
  <data name="DeleteArgs_Device" xml:space="preserve">
    <value>Delete the specified device.</value>
  </data>
  <data name="DeleteArgs_Subscription" xml:space="preserve">
    <value>Delete the specified subscription.</value>
  </data>
  <data name="DeleteArgs_Sms" xml:space="preserve">
    <value>Delete the specified sms.</value>
  </data>
  <data name="DeleteArgs_Key" xml:space="preserve">
    <value>Delete the configured key.</value>
  </data>
  <data name="KeyRemoved" xml:space="preserve">
    <value>Key deleted!</value>
  </data>
  <data name="KeySet" xml:space="preserve">
    <value>Key set!</value>
  </data>
  <data name="ChatCreated" xml:space="preserve">
    <value>Chat created!</value>
  </data>
  <data name="ChatMuted" xml:space="preserve">
    <value>Chat muted.</value>
  </data>
  <data name="ChatUnmuted" xml:space="preserve">
    <value>Chat muted.</value>
  </data>
  <data name="ChatDeleted" xml:space="preserve">
    <value>Chat deleted!</value>
  </data>
  <data name="DeviceDeleted" xml:space="preserve">
    <value>Device deleted!</value>
  </data>
  <data name="MessageSent" xml:space="preserve">
    <value>Message sent!</value>
  </data>
  <data name="MessageDeleted" xml:space="preserve">
    <value>Message deleted!</value>
  </data>
  <data name="PushSent" xml:space="preserve">
    <value>Push sent!</value>
  </data>
  <data name="PushDeleted" xml:space="preserve">
    <value>Push deleted!</value>
  </data>
  <data name="LinkSent" xml:space="preserve">
    <value>Link sent!</value>
  </data>
  <data name="ClipSent" xml:space="preserve">
    <value>Clip sent!</value>
  </data>
  <data name="SubscriptionDeleted" xml:space="preserve">
    <value>Subscription deleted!!</value>
  </data>
  <data name="Errors_NotEnoughArguments" xml:space="preserve">
    <value>Not enough arguments!
    
Show commands with:
'pb help' or 'pb -h'</value>
  </data>
  <data name="Errors_ParameterInvalid" xml:space="preserve">
    <value>Parameter is invalid!</value>
  </data>
  <data name="Errors_NoParametersGiven" xml:space="preserve">
    <value>No parameters given.
    
Show commands with:
'pb help' or 'pb -h'</value>
  </data>
</root>